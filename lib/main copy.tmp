import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:webview_flutter_android/webview_flutter_android.dart';
import 'package:file_picker/file_picker.dart';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:flutter_downloader/flutter_downloader.dart';
import 'package:dio/dio.dart';

  void   main () async {

  WidgetsFlutterBinding.ensureInitialized();
await FlutterDownloader.initialize(debug: true);
 runApp(
    MaterialApp(
      theme: ThemeData(useMaterial3: true),
      debugShowCheckedModeBanner: false,
      home: const WebViewApp(),
    ),
  );
}


class WebViewApp extends StatefulWidget {
  const WebViewApp({super.key});

  @override
  State<WebViewApp> createState() => _WebViewAppState();
}

class _WebViewAppState extends State<WebViewApp> {
  late final WebViewController _controller;
  late final bool permissionGranted;
  @override
  void initState() {
  
    _getStoragePermission();

  late final PlatformWebViewControllerCreationParams params;
    if (WebViewPlatform.instance is WebKitWebViewPlatform) {
      params = WebKitWebViewControllerCreationParams(
        allowsInlineMediaPlayback: true,
        mediaTypesRequiringUserAction: const <PlaybackMediaTypes>{},
      );
    } else {
      params = const PlatformWebViewControllerCreationParams();
    }

    final WebViewController controller = WebViewController.fromPlatformCreationParams(params);
    
  

     if (Platform.isAndroid) {
      final myAndroidController = controller.platform as AndroidWebViewController;
      
      myAndroidController.setOnShowFileSelector(_androidFilePicker);
    }

    controller 
    ..setJavaScriptMode(JavaScriptMode.unrestricted)
    ..setNavigationDelegate(
        NavigationDelegate(
          onNavigationRequest:   (NavigationRequest request) async {
              if (request.url.contains("_download=1")) {
                //_launchURL(request.url);
String dlpath = "";
                  await getDownloadPath().then((value) => (
                  dlpath = value ?? ""
                ));
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(
     content: Text("Sending Message " + dlpath),
));
               
                 if(dlpath != "") {
//downloadFile(url: request.url, filename: "testzasdfreewqa.pdf");
  _startDownloading(request.url, dlpath);

               //   _launchURL(request.url);
/*
                
                 await FlutterDownloader.enqueue(
                  url: request.url,
                  savedDir: dlpath, 
                  fileName: 'test.pdf',
                  showNotification: true,
                  openFileFromNotification: true,
                ); */
               } 
               
                return NavigationDecision.prevent;
                
              } else {
                return NavigationDecision.navigate;
              }
            },
        )
      )
      ..loadRequest(
        Uri.parse('https://sacofficemail.gov.mm'),
      );
      

     

       _controller = controller;
       super.initState();
  }


  Future<String?> getDownloadPath() async {
   Directory downloadDirectory;

      if (Platform.isIOS) {
        downloadDirectory = await getApplicationDocumentsDirectory();
      } else {
        downloadDirectory = Directory('/storage/emulated/0/Download');
        if (!await downloadDirectory.exists()) downloadDirectory = (await getExternalStorageDirectory())!;
      }
    return downloadDirectory.path;
  }


   void _startDownloading(String url, String filePath) async {
    String fileName = "Sample.pdf";
 Dio dio = Dio();
    await dio.download(url, filePath);

    
  }

 _launchURL(String url) async {

     if (await canLaunchUrl(Uri.parse(url))) {
      await launchUrl(
        Uri.parse(url), mode: LaunchMode.externalNonBrowserApplication
        );
    } else {
      throw 'Could not launch $url';
    } 


  }


  Future downloadFile({
    required String url,
    required String filename,
  }) async {
    try {
      HttpClient client = HttpClient();
      List<int> downloadData = [];

      Directory downloadDirectory;

      if (Platform.isIOS) {
        downloadDirectory = await getApplicationDocumentsDirectory();
      } else {
        downloadDirectory = Directory('/storage/emulated/0/Download');
        if (!await downloadDirectory.exists()) downloadDirectory = (await getExternalStorageDirectory())!;
      }

      String filePathName = "${downloadDirectory.path}/$filename";
      File savedFile = File(filePathName);
      bool fileExists = await savedFile.exists();

      if (fileExists && mounted) {
        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text("File already downloaded")));
      } else {
        client.getUrl(Uri.parse(url)).then(
          (HttpClientRequest request) {
         
            return request.close();
          },
        ).then(
          (HttpClientResponse response) {
            response.listen((d) => downloadData.addAll(d), onDone: () {
              savedFile.writeAsBytes(downloadData);
     
            });
          },
        );
      }
    } catch (error) {
      
    }
  }

   Future<List<String>> _androidFilePicker(FileSelectorParams params) async {
      FilePickerResult? result = await FilePicker.platform.pickFiles();

      if (result != null) {
        String filePath = result.files.single.path!;
        String fileName = result.files.single.name;

        // Convert the file to base64
        List<int> fileBytes = await File(filePath).readAsBytes();

        //convert filepath into uri
        final filePath1 = (await getTemporaryDirectory()).uri.resolve(fileName);
        final file = await File.fromUri(filePath1).create(recursive: true);

        //convert file in bytes
        await file.writeAsBytes(fileBytes, flush: true);

        return [file.uri.toString()];
      }

      return [];
    }


  Future _getStoragePermission() async {
  if (await Permission.storage.request().isGranted) {
    setState(() {
      permissionGranted = true;
    });
  } else if (await Permission.storage.request().isPermanentlyDenied) {
    await openAppSettings();
  } else if (await Permission.storage.request().isDenied) {
    setState(() {
      permissionGranted = false;
    });
  }
}

  @override
  Widget build(BuildContext context) {
    return Scaffold(

      body: SafeArea(
        child: WebViewWidget(
        controller: _controller,
        
      ),
    ));
  }
}